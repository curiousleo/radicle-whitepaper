;; Helper to modify a dict at a key.
(def modify-dict
  (fn [key mod-fn mp]
    (insert key (mod-fn (lookup key mp)) mp)))

;; Creates a currency and returns the relevant evaluation function.
(def create-currency (fn []

  ;; The dict of all accounts
  (def accounts (ref (dict)))

  ;; Create an account with 10 coins.
  (def new-account
    (fn [name]
      (modify-ref accounts
        (fn [acc]
          (insert name 10 acc)))
      :ok))

  ;; Get an account's balance.
  (def balance
    (fn [name]
      (lookup name (read-ref accounts))))

  ;; Apply a function to an account.
  (def modify-account
    (fn [f]
      (fn [name amount]
        (modify-ref
          accounts
          (fn [acc]
            (modify-dict
              name
              (fn [x]
                (f x amount))
              acc)))
        :ok)))

  ;; Debit an account.
  (def debit (modify-account -))

  ;; Credit an account.
  (def credit (modify-account +))

  ;; Transfer money from one account to another.
  (def transfer (from to amount)
    (if (< amount (balance from))
        (do (debit  from amount)
            (credit to   amount))
      fail))

  (def currency-eval
    (fn [expr]
      (def c (head expr))
      (cond
        (eq? c 'new-account)
          (new-account (nth 1 expr))
        (eq? c 'account-balance)
          (balance (nth 2 expr))
        (eq? c 'transfer)
          (transfer (nth 1 expr) (nth 2 expr) (nth 3 expr))
        :else fail)))

  ;; We return the evaluation function for this currency.
  currency-eval))
